from decimal import DivisionByZero
import cv2
import mediapipe as mp
import time
import math
import serial


cap = cv2.VideoCapture(0)

mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils

pTime = 0
cTime = 0
ser = serial.Serial('COM3', baudrate=9600, timeout=1)

wristCheck = False
wristX = 0
wristY = 0

palmCheck = False
palmY = 0
palmY = 0

leftMostCheck = False
leftMostY = 0
leftMostX = 0

rightMostCheck = False
rightMostY = 0 
rightMostX = 0

YAngleTrans = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']

a=0

"""for i in range(0,180):
    num = input("Enter number: ")
    ser.write(str.encode(num))
    print(ser.readline())"""

while True:
    success, img = cap.read()
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)

    if results.multi_hand_landmarks:
        for handLms in results.multi_hand_landmarks:
            for id, lm in enumerate(handLms.landmark):
                h, w, c = img.shape
                cx, cy = int(lm.x * w), int(lm.y * h)

                """if id == 0: #wrist
                    cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED)

                if id == 9: #upper palm
                    cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED)

                if id == 4: #thumb
                    cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED)
                
                if id == 8: #index
                    cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED)

                if id == 12: #middle 
                    cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED)

                if id == 16: #ring
                    cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED)

                if id == 20: #pinky
                    cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED)

                if id == 17: #pinky-most side
                    cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED)
                if id == 5: #index-most side
                    cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED)"""

                if id==0:
                    wristZ = int(lm.z*10000000)
                    wristCheck = True
                    wristX = cx
                    wristY = cy
                
                elif id==5:
                    rightMostZ=int(lm.z*100)
                    rightMostCheck = True
                    rightMostY = cy
                    rightMostX = cx

                elif id == 9:
                    palmCheck = True
                    palmX = cx
                    palmY = cy
                
                elif id==17:
                    leftMostZ = int(lm.z*100)
                    leftMostCheck = True
                    leftMostY = cy
                    leftMostX = cx
                
                #back and forth movements
                if leftMostCheck and rightMostCheck:
                    topZ = (rightMostZ+leftMostZ)//2
                    a=5
                    if(a<180):
                        a = int((wristZ-(-topZ))*10+90)
                        a = int(a/20)
                    if(a>=0 and a<=9):
                        ser.write(YAngleTrans[a].encode())
                    #ser.write(YAngleTrans[a])
                    


                #side to side movements
                if palmCheck and wristCheck:
                    height = wristY - palmY
                    width = wristX - palmX
                    """cv2.rectangle(img, (wristX, wristY), (palmX, wristY), (0, 0, 0), thickness=5, lineType=8, shift=0)
                    cv2.rectangle(img, (palmX, wristY), (palmX, palmY), (0, 0, 0), thickness=5, lineType=8, shift=0)"""
                    
                    if(int(width)!=0):
                        intAngle = int(math.atan(height/width)*180/3.1415)//20
                        if intAngle<0:
                            intAngle+=10
                        angle = str(intAngle)
                    else: 
                        angle = "5"
                    wristCheck = False
                    palmCheck = False
                    ser.write(angle.encode())
                
                if a and angle:
                    print(angle, a)
            mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)
    
    #print(ser.readline())
                
                
                
            
    """cTime = time.time()
    fps = 1 / (cTime - pTime)
    pTime = cTime"""

    #cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 255), 3)

    cv2.imshow("Image", img)
    cv2.waitKey(1)
